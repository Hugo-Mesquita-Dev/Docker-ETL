version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_PASSWORD: senha123
      POSTGRES_DB: vendas_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  spark-etl:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      IVY2_HOME: "/tmp/.ivy2"
      _JAVA_OPTIONS: "-Duser.home=/tmp"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./data/output:/app/data/output
      - ./scripts:/app/scripts:ro
      - ./data/input:/app/data/input:ro
    command: ["/opt/spark/bin/spark-submit", "/app/scripts/etl_spark.py"]

  airflow:
    image: apache/airflow:2.5.0
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:senha123@postgres:5432/vendas_db
      AIRFLOW__CORE__FERNET_KEY: 46BKJoQYlPkva0Zq6CJvJHzQO5Yhgl8R8xO6wR06X0o=
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: >
      bash -c "
      until airflow db check; do echo 'Waiting for database'; sleep 5; done &&
      airflow db init &&
      airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || true &&
      airflow scheduler &
      airflow webserver
      "
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "[ -f /opt/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 3

  metabase:
    image: metabase/metabase:latest
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: vendas_db
      MB_DB_PORT: 5432
      MB_DB_USER: postgres
      MB_DB_PASS: senha123
      MB_DB_HOST: postgres
      MB_DB_CONNECTION_TIMEOUT_MS: 30000
    ports:
      - "3000:3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -s -I http://localhost:3000/api/health | grep '200 OK'"]
      interval: 10s
      timeout: 5s
      retries: 10

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - postgres

  grafana:
    image: grafana/grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_DISABLE_INITIAL_ADMIN_CREATION: 'false'
      GF_SECURITY_COOKIE_SECURE: 'true'
      GF_SECURITY_ALLOW_EMBEDDING: 'true'
      GF_AUTH_DISABLE_LOGIN_FORM: 'false'
      GF_AUTH_ANONYMOUS_ENABLED: 'false'
    ports:
    - "3001:3000"
    volumes:
     - grafana_data:/var/lib/grafana
     - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
    - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 30s
      retries: 5

volumes:
  pg_data:
  grafana_data: